RELEASE 1:

1) Insert
    1.a) Insert 3 product type.

        insert into product_type(nama)
        values('Makanan'),
	          ('Minuman'),
	          ('Permen');

    1.b) Insert 2 product dengan product type id = 1

        insert into product(nama, stok, harga, product_type_id)
        values('Mie Rebus', 10, 11000, 1),
              ('Mie Goreng Spesial', 15, 12000, 1);

    1.c) Insert 3 product dengan product type id = 2

        insert into product(nama, stok, harga, product_type_id)
        values('Es Jeruk', 10, 5000, 2),
              ('Es Mangga', 15, 6000, 2),
              ('Es Teler', 11, 7000, 2);

    1.d) Insert 3 product dengan product type id = 3

        insert into product(nama, stok, harga, product_type_id)
        values('Permen Buah', 20, 3000, 3),
              ('Permen Dino', 25, 4000, 3),
              ('Permen Original', 30, 5000, 3);

    1.e) Insert product description pada setiap product.

        insert into product_description(description, product_id)
        values('Makanan Lezat', 1),
              ('Minuman Segar', 2),
              ('Aneka Permen', 3);

    1.f) Insert 3 payment methods.

        insert into payment_method(nama)
        values('ovo'),
              ('gopay'),
              ('bank');

    1.g) Insert 5 user pada tabel user.

        insert into pelanggan(nama, alamat, tanggal_lahir, gender, created_at, updated_at)
        values('joko', 'malang', '1996-05-07', 'pria', '2023-09-02 09:20:41', current_date),
              ('andi', 'jakarta', '1997-04-06', 'pria', '2023-09-06 07:19:21', current_date),
              ('mirna', 'jogjakarta', '1998-03-05', 'wanita','2023-09-07 08:08:59', current_date),
              ('amel', 'bandung', '1999-02-04', 'wanita','2023-09-10 10:33:24', current_date),
              ('fuad', 'surabaya', '2000-01-03', 'pria', '2023-09-13 10:23:51', current_date);

    1.h) Insert 3 transaksi di masing-masing user (min 3 user). (soal berlanjut ke soal 1.j)

        insert into transaksi(tanggal, status, pelanggan_id, payment_method_id)
        values('2023-09-15', 'SUKSES', 1, 1),
              ('2023-09-16', 'SUKSES',1, 1),
              ('2023-09-17', 'SUKSES', 1, 1);
            
        insert into transaksi(tanggal, status, pelanggan_id, payment_method_id)
        values('2023-09-18', 'SUKSES', 2, 2),
              ('2023-09-19', 'PENDING',2, 2),
              ('2023-09-20', 'SUKSES', 2, 2);
            
        insert into transaksi(tanggal, status, pelanggan_id, payment_method_id)
        values('2023-09-18', 'SUKSES', 3, 3),
              ('2023-09-19', 'PENDING',3, 3),
              ('2023-09-20', 'GAGAL', 3, 3);

    1.i) Insert 3 product di masing-masing transaksi.

        insert into transaksi_detail(qty, harga, sub_total, product_id, transaksi_id)
        values(1, 11000, 11000, 1, 1),
              (2, 12000, 24000, 2, 1),
              (3, 5000, 15000, 3, 1); 
            
        insert into transaksi_detail(qty, harga, sub_total, product_id, transaksi_id)
        values(3, 6000, 18000, 4, 2),
              (2, 7000, 14000, 5, 2),
              (1, 3000, 3000, 6, 2);
	  
        insert into transaksi_detail(qty, harga, sub_total, product_id, transaksi_id)
        values(3, 4000, 12000, 7, 3),
              (2, 5000, 10000, 8, 3),
              (4, 5000, 20000, 3, 3);

2) Select
    2.a) Tampilkan nama user / pelanggan dengan gender Laki-laki / M.

        SELECT nama
        FROM pelanggan
        WHERE gender = 'Laki-laki/M';

    2.b) Tampilkan product dengan id = 3.

        SELECT *
        FROM product
        WHERE id = 3;

    2.c) Tampilkan data pelanggan yang created_at dalam range 7 hari kebelakang dan mempunyai nama mengandung kata ‘a’.

        SELECT *
        FROM pelanggan
        WHERE created_at >= current_date - interval '7 days'
        AND nama LIKE '%a%';

    2.d) Hitung jumlah user / pelanggan dengan status gender Perempuan.

        SELECT COUNT(*)
        FROM pelanggan
        WHERE gender = 'wanita';

    2.e) Tampilkan data pelanggan dengan urutan sesuai nama abjad

        SELECT *
        FROM pelanggan
        ORDER BY nama ASC;

    2.f) Tampilkan 5 data transaksi dengan product id = 3

        SELECT *
        FROM transaksi_detail
        WHERE product_id = 3
        LIMIT 5;

3. Update
    3.a) Ubah data product id 1 dengan nama ‘product dummy’.

        UPDATE product
        SET nama = 'product dummy'
        WHERE id = 1;

    3.b) Update qty = 3 pada transaction detail dengan product id 1.

        UPDATE transaksi_detail
        SET qty = 3
        WHERE product_id = 1;


4. Delete
    4.a) Delete data pada tabel product dengan id 1.

        DELETE FROM product
        WHERE id = 1;


    4.b) Delete pada tabel product dengan product-type id 1.

        DELETE FROM product
        WHERE product_type_id = 1;


RELEASE 2: Join, Union, Sub-query, Function

1. Gabungkan data transaksi dari user id 1 dan user id 2.

        SELECT *
        FROM TRANSAKSI
        WHERE PELANGGAN_ID = 1
        UNION ALL
        SELECT *
        FROM TRANSAKSI
        WHERE PELANGGAN_ID = 2;

2. Tampilkan jumlah harga transaksi user id 1.

        SELECT PELANGGAN_ID,
        SUM(SUB_TOTAL) AS TOTAL_HARGA_TRANSAKSI
        FROM TRANSAKSI AS T
        JOIN TRANSAKSI_DETAIL AS DT ON T.ID = DT.TRANSAKSI_ID
        WHERE PELANGGAN_ID = 1
        GROUP BY PELANGGAN_ID;

3. Tampilkan total transaksi dengan product type 2.

        SELECT COUNT(*) AS JUMLAH_TRANSAKSI
        FROM TRANSAKSI_DETAIL AS DT
        JOIN PRODUCT AS P ON DT.PRODUCT_ID = P.ID
        WHERE P.PRODUCT_TYPE_ID = 2;

4. Tampilkan semua field table product dan field name table product type yang saling berhubungan.

        SELECT product.*, product_type.nama AS product_type_name
        FROM product
        INNER JOIN product_type ON product.product_type_id = product_type.id;

5. Tampilkan semua field table transaction, field name table product dan field name table user.

        SELECT TRANSAKSI.*,
            PRODUCT.NAMA AS NAMA_PRODUK,
            PELANGGAN.NAMA AS NAMA_PELANGGAN
        FROM TRANSAKSI
        JOIN TRANSAKSI_DETAIL ON TRANSAKSI.ID = TRANSAKSI_DETAIL.TRANSAKSI_ID
        JOIN PRODUCT ON TRANSAKSI_DETAIL.PRODUCT_ID = PRODUCT.ID
        JOIN PELANGGAN ON TRANSAKSI.PELANGGAN_ID = PELANGGAN.ID;

6. Tampilkan data products yang tidak pernah ada di tabel transaction_details dengan sub-query.

        SELECT *
        FROM PRODUCT
        WHERE ID NOT IN
                (SELECT DISTINCT PRODUCT_ID
                    FROM TRANSAKSI_DETAIL);
